##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := 

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET := 

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := 

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := 

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := 

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),ia32)
endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),intel64)
endif

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
endif

# Mac OS X*
ifeq ($(TARGET_OS),mac)
endif

# Windows
ifeq ($(TARGET_OS),windows)
    TEST_TOOL_ROOTS += inlined_funcs_opt
    OBJECT_ROOTS += inlined_funcs_asm
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += inscount_for_lea_opt 
        OBJECT_ROOTS += update_icount_asm 
    endif
endif

###### Handle exceptions here ######

# The launcher is only relevant when running from the kit structure.
ifneq ($(KIT),1)
    TEST_ROOTS := $(filter-out launcher_linux launcher_mac, $(TEST_ROOTS))
    TOOL_ROOTS := $(filter-out launcher_tool, $(TOOL_ROOTS))
    APP_ROOTS := $(filter-out launcher_app, $(APP_ROOTS))
endif



##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test



##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######
  
$(OBJDIR)inscount_for_lea_opt$(PINTOOL_SUFFIX): $(OBJDIR)inscount_for_lea_opt$(OBJ_SUFFIX) $(OBJDIR)update_icount_asm$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)inlined_funcs_opt$(PINTOOL_SUFFIX): $(OBJDIR)inlined_funcs_opt$(OBJ_SUFFIX) $(OBJDIR)inlined_funcs_asm$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

###### Special applications' build rules ######


###### Special objects' build rules ######


###### Special dlls' build rules ######



