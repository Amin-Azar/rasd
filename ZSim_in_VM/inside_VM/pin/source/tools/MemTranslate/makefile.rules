##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := indirect_jmp_with_translation memory_addr_callback memory_callback_error

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := indirect_jmp

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Handle exceptions here ######

# See Mantis 2963
ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out memory_addr_callback memory_callback_error, $(TEST_TOOL_ROOTS))
endif


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

# Test that IARG_BRANCH_TARGET_ADDR works on indirect branch when its target is in memory 
indirect_jmp_with_translation.test: $(OBJDIR)indirect_jmp_with_translation$(PINTOOL_SUFFIX) $(OBJDIR)indirect_jmp$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)indirect_jmp_with_translation$(PINTOOL_SUFFIX) -o $(OBJDIR)indirect_jmp_with_translation.out \
	  -- $(OBJDIR)indirect_jmp$(EXE_SUFFIX)
	$(RM) $(OBJDIR)indirect_jmp_with_translation.out

memory_addr_callback.test: $(OBJDIR)memory_addr_callback$(PINTOOL_SUFFIX)
	$(PIN) -t $(OBJDIR)memory_addr_callback$(PINTOOL_SUFFIX) \
	  -- $(TESTAPP) makefile $(OBJDIR)memory_addr_callback.makefile.copy
	$(CMP) makefile $(OBJDIR)memory_addr_callback.makefile.copy
	$(RM) $(OBJDIR)memory_addr_callback.makefile.copy

memory_callback_error.test: $(OBJDIR)memory_callback_error$(PINTOOL_SUFFIX)
	-$(PIN) -t $(OBJDIR)memory_callback_error$(PINTOOL_SUFFIX) \
	  -- $(TESTAPP) makefile $(OBJDIR)memory_callback_error.makefile.copy > $(OBJDIR)memory_callback_error.out 2>&1
	$(QGREP) "Illegal use of memory address callback and register parameters" $(OBJDIR)memory_callback_error.out
	$(RM) $(OBJDIR)memory_callback_error.out
	$(RM) -f $(OBJDIR)memory_callback_error.makefile.copy # this file might not be generated so we use the -f flag


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special objects' build rules ######

$(OBJDIR)indirect_jmp$(EXE_SUFFIX): $(OBJDIR)indirect_jmp$(OBJ_SUFFIX)
	$(LINKER) $(APP_LDFLAGS_LINK_ASM) $(LINK_EXE)$@ $(PIE) $<
